import dagger
import asyncio
from pathlib import Path

async def main():
    async with dagger.Connection() as client:
        # 1. Concourse modÃ¼lÃ¼nÃ¼ yÃ¼kle
        concourse_mod = await client.module("github.com/vito/daggerverse/concourse")

        # 2. Postgres ve Concourse container'larÄ±nÄ± baÅŸlat
        concourse = await concourse_mod.concourse(
            image="concourse/concourse:7.9.1",
            postgres_image="postgres:15",
            port=8080,
            runtime="containerd"  # Alternatif: "houdini"
        )

        # 3. Concourse container logunu gÃ¶ster
        logs = await concourse.container().stdout()
        print("ğŸ“œ Concourse Container Log:\n", logs)

        # 4. Pipeline config.yaml dosyasÄ±nÄ± oku
        config_file = await client.host().directory(".").file("pipeline.yaml")

        # 5. Pipeline dosyasÄ±nÄ± yÃ¼kle
        pipeline = await concourse_mod.load_pipeline(config_file=config_file)

        # 6. Pipeline'daki job isimlerini ve konfigÃ¼rasyonlarÄ±nÄ± gÃ¶ster
        print("âœ… Pipeline iÃ§indeki iÅŸler:")
        for job_def in await pipeline.jobs():
            job_name = await job_def.name()
            job_config = await job_def.config()
            print(f"ğŸ”§ Job: {job_name}")
            print(f"ğŸ“„ Config:\n{job_config}")

            # 7. Job'u Ã§alÄ±ÅŸtÄ±r
            print(f"ğŸš€ Job '{job_name}' Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor...")
            await job_def.run()
            print(f"âœ… Job '{job_name}' tamamlandÄ±.\n")

if __name__ == "__main__":
    asyncio.run(main())
